// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TinyLink.Persistence.SqlServer;

#nullable disable

namespace TinyLink.Persistence.SqlServer.Migrations
{
    [DbContext(typeof(TinyLinkDbContext))]
    partial class TinyLinkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TinyLink.Core.Domain.Links.Entities.Link", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<long>("TotalVistCount")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Links", (string)null);
                });

            modelBuilder.Entity("TinyLink.Core.Domain.LinkVisits.Entities.LinkVisit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<long>("LinkId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("VisitedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsProcessed");

                    b.HasIndex("LinkId");

                    b.ToTable("LinkVisits", (string)null);
                });

            modelBuilder.Entity("TinyLink.Core.Domain.LinkVisitStatistics.Entities.LinkVisitStatistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<byte>("Day")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Hour")
                        .HasColumnType("tinyint");

                    b.Property<long>("LinkId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Month")
                        .HasColumnType("tinyint");

                    b.Property<int>("VisitCount")
                        .HasColumnType("int");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("LinkId", "Year", "Month", "Day", "Hour")
                        .IsUnique();

                    b.ToTable("LinkVisitStatistics", (string)null);
                });

            modelBuilder.Entity("TinyLink.Core.Domain.LinkVisits.Entities.LinkVisit", b =>
                {
                    b.HasOne("TinyLink.Core.Domain.Links.Entities.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");
                });

            modelBuilder.Entity("TinyLink.Core.Domain.LinkVisitStatistics.Entities.LinkVisitStatistic", b =>
                {
                    b.HasOne("TinyLink.Core.Domain.Links.Entities.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");
                });
#pragma warning restore 612, 618
        }
    }
}
